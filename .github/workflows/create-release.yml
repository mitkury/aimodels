name: Create Release from Tag

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag to create changelog
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, list all commits
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            # List commits between tags
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges ${PREV_TAG}..HEAD)
          fi
          
          # Escape newlines for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Changes in this Release
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ```
            npm install aimodels@${{ steps.get_version.outputs.VERSION }}
            ```
            
            or
            
            ```
            pip install aimodels.dev==${{ steps.get_version.outputs.VERSION }}
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 