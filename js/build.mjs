#!/usr/bin/env node

import { build } from 'esbuild';
import { existsSync, mkdirSync, writeFileSync } from 'node:fs';
import { dirname, join, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

// Get current directory and project root
const __dirname = dirname(fileURLToPath(import.meta.url));
const rootDir = resolve(__dirname, '..');

// Use BUILD_DIR environment variable if provided, default to 'dist'
const buildDir = process.env.BUILD_DIR || 'dist';
const distDir = join(__dirname, buildDir);

/**
 * Generate data for the package from the source builders
 */
async function generateData() {
  console.log('Generating data for aimodels...');
  
  // First, we need to build the src/builders directory to allow importing it
  await build({
    entryPoints: [join(__dirname, 'src/builders/index.ts')],
    bundle: true,
    platform: 'node',
    target: 'node18',
    outfile: join(distDir, 'temp-builders.mjs'),
    format: 'esm',
    plugins: [
      {
        name: 'resolve-data-paths',
        setup(build) {
          // Resolve @data/... imports to the root data directory
          build.onResolve({ filter: /^@data\// }, args => {
            const dataPath = args.path.replace('@data/', '');
            return { path: join(rootDir, 'data', dataPath) };
          });
        }
      }
    ]
  });
  
  try {
    // Import the built builders module
    const builders = await import(join(distDir, 'temp-builders.mjs'));
    
    // Use the builder functions to generate the data
    const modelsArray = builders.buildAllModels();
    const providersData = builders.buildProvidersData();
    const organizations = builders.buildOrganizationsData();
    
    // Convert arrays to objects keyed by ID for proper test compatibility
    const modelsById = Object.fromEntries(modelsArray.map(model => [model.id, model]));
    const providersById = Object.fromEntries(providersData.providers.map(provider => [provider.id, provider]));
    
    // Create the output data file
    const outputPath = join(distDir, 'data.js');
    
    // Format the data as a JS module
    const outputData = `// Generated by build process - do not edit directly
export const models = ${JSON.stringify(modelsById, null, 2)};
export const providers = ${JSON.stringify(providersById, null, 2)};
export const organizations = ${JSON.stringify(organizations, null, 2)};
`;
    
    // Write the data
    writeFileSync(outputPath, outputData);
    
    console.log(`Data successfully written to ${outputPath}`);
    console.log(`Generated data for ${modelsArray.length} models, ${providersData.providers.length} providers, and ${Object.keys(organizations).length} organizations`);
  } catch (error) {
    console.error('Error generating data:', error);
    throw error;
  }
}

async function main() {
  console.log(`Starting build process for ${buildDir}...`);
  
  // Ensure dist directory exists
  if (!existsSync(distDir)) {
    mkdirSync(distDir, { recursive: true });
  }
  
  // Generate the data
  await generateData();
  
  // Process index.js for distribution
  console.log('Processing index.js for distribution...');
  
  // Process index.js to CJS format for require support
  await build({
    entryPoints: [join(__dirname, 'src/index.js')],
    bundle: false,
    platform: 'node',
    target: 'node18',
    outfile: join(distDir, 'index.cjs'),
    format: 'cjs',
  });
  
  // Copy the ESM version directly
  await build({
    entryPoints: [join(__dirname, 'src/index.js')],
    bundle: false,
    platform: 'node',
    target: 'node18',
    outfile: join(distDir, 'index.js'),
    format: 'esm',
  });
  
  console.log(`Build completed successfully in ${buildDir}!`);
}

main().catch(err => {
  console.error('Build failed:', err);
  process.exit(1);
}); 